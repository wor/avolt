// -*- coding: utf-8 -*- vim:fenc=utf-8:ft=c
#ifndef AVOLT_CONF_INCLUDED
#define AVOLT_CONF_INCLUDED

#include <stdbool.h>
#include "avolt.conf.h"

/* Program version */
const char* VERSION        = "0.4.2";

/* Use semaphores for preventing multiple synchronous volume changes. */
const bool  USE_SEMAPHORE  = true;

/* System semaphore name to use. */
const char* SEMAPHORE_NAME = "avolt";

/* Volume type to use when setting or receiving volume. See alsa.conf.h for
 * different types and their explanations. */
const enum Volume_type VOLUME_TYPE = alsa_percentage;

// TODO: remove NULL entries set as program is run, they don't belong to user
// configuration header.
/* Sound profiles
 */
struct sound_profile DEFAULT = {
    .profile_name = "default",

    /* Alsa mixer element name to be used. */
    .mixer_element_name = "Master",
    .mixer_element = NULL,

    /* These expected to be same as mixer_element if not given
    // Volume control element name for the mixer_element_name.
    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,
    */

    /* Default volume used for profile, only used when set_default_volume is
     * true. */
    .default_volume = 12,
    /* When toggling/changing to this profile warn if current volume exceeds
     * this. This only has meaning when set_default_volume is false and
     * confirm_exceeding_volume_limit is true. */
    .soft_limit_volume = 28,
    /* The volume type of default and soft limit volume of this profile. */
    .volume_type = VOLUME_TYPE,
    /* Set default volume when toggling/changing to this profile if not other
     * volume given. */
    .set_default_volume = true,
    /* Ask for confirmation if volume is going to exceed profiles
     * soft_limit_volume when toggling/changing to this profile. */
    .confirm_exceeding_volume_limit = true,
};

struct sound_profile FRONT_PANEL = {
    .profile_name = "front panel",

    .mixer_element_name = "Front Panel",
    .mixer_element = NULL,

    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,

    .default_volume = 24,
    .soft_limit_volume = 68,
    .volume_type = VOLUME_TYPE,
    .set_default_volume = true,
    .confirm_exceeding_volume_limit = false,
};

// TODO: check that works with single and >2 profiles.
/* Sound profiles which can be toggled with toggle output */
const int TOGGLE_SOUND_PROFILES_SIZE = 2;
struct sound_profile* TOGGLE_SOUND_PROFILES[TOGGLE_SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};

/* All sound profiles in use. */
const int SOUND_PROFILES_SIZE = 2;
struct sound_profile* SOUND_PROFILES[SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};

#endif
