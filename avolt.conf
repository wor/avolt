// -*- coding: utf-8 -*- vim:fenc=utf-8:ft=c

/* Alsa mixer element config */
struct sound_profile
{
    char* profile_name;

    char* mixer_element_name;
    snd_mixer_elem_t* mixer_element;

    char* volume_cntrl_mixer_element_name;
    snd_mixer_elem_t* volume_cntrl_mixer_element;

    int default_volume;
    int soft_limit_volume;
    bool set_default_volume; /* Set default volume when element toggled on */
    bool confirm_exeeding_volume_limit;
    //int (*on_func)(void); // XXX: not used yet
};

const char* VERSION        = "0.3a";
const char* SEMAPHORE_NAME = "avolt";
const bool USE_SEMAPHORE   = true;

/* Sound profiles
 */

struct sound_profile DEFAULT = {
    .profile_name = "default",

    .mixer_element_name = "Master",
    .mixer_element = NULL,

    /* These expected to be same as mixer_element if not given
    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,
    */

    .default_volume = 32,
    .soft_limit_volume = 55,
    .set_default_volume = false,
    .confirm_exeeding_volume_limit = true,
};

struct sound_profile FRONT_PANEL = {
    .profile_name = "front panel",

    .mixer_element_name = "Front Panel",
    .mixer_element = NULL,

    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,

    .default_volume = 50,
    .soft_limit_volume = 85,
    .set_default_volume = false,
    .confirm_exeeding_volume_limit = false,
};

/* Sound profiles which can be toggled with toggle output */
const int TOGGLE_SOUND_PROFILES_SIZE = 2;
struct sound_profile* TOGGLE_SOUND_PROFILES[TOGGLE_SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};

/* */
const int SOUND_PROFILES_SIZE = 2;
struct sound_profile* SOUND_PROFILES[SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};
