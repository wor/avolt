// -*- coding: utf-8 -*- vim:fenc=utf-8:ft=c
#ifndef AVOLT_CONF_INCLUDED
#define AVOLT_CONF_INCLUDED

#include <stdbool.h>
#include "avolt.conf.h"

const char* VERSION        = "0.4.1b";
const char* SEMAPHORE_NAME = "avolt";
const bool  USE_SEMAPHORE  = true;

/* Sound profiles
 */

// Volume type to use when setting or receiving volume.
//const enum Volume_type VOLUME_TYPE = hardware_percentage;
const enum Volume_type VOLUME_TYPE = alsa_percentage;

struct sound_profile DEFAULT = {
    .profile_name = "default",

    .mixer_element_name = "Master",
    .mixer_element = NULL,

    /* These expected to be same as mixer_element if not given
    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,
    */

    .default_volume = 12,
    .soft_limit_volume = 28,
    .volume_type = VOLUME_TYPE,
    .set_default_volume = false,
    .confirm_exeeding_volume_limit = true,
};

struct sound_profile FRONT_PANEL = {
    .profile_name = "front panel",

    .mixer_element_name = "Front Panel",
    .mixer_element = NULL,

    .volume_cntrl_mixer_element_name = "Master",
    .volume_cntrl_mixer_element = NULL,

    .default_volume = 24,
    .soft_limit_volume = 68,
    .volume_type = VOLUME_TYPE,
    .set_default_volume = false,
    .confirm_exeeding_volume_limit = false,
};

/* Sound profiles which can be toggled with toggle output */
const int TOGGLE_SOUND_PROFILES_SIZE = 2;
struct sound_profile* TOGGLE_SOUND_PROFILES[TOGGLE_SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};

/* */
const int SOUND_PROFILES_SIZE = 2;
struct sound_profile* SOUND_PROFILES[SOUND_PROFILES_SIZE] = {
    &DEFAULT,
    &FRONT_PANEL
};

#endif
